{"mappings":"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","sources":["app.js","routers/keycapRouter.js","models/keycapModel.js","utils/API_features.js","routers/keyswitchRouter.js","models/keyswitchesModel.js","routers/fullbuildRouter.js","models/fullBuildsModel.js"],"sourcesContent":["const express = require(\"express\");\r\nconst cors = require(\"cors\");\r\n//ROUTERS\r\nconst keycapRouter = require(\"./routers/keycapRouter\");\r\nconst keyswitchRouter = require(\"./routers/keyswitchRouter\");\r\nconst fullbuildRouter = require(\"./routers/fullbuildRouter\");\r\n\r\nconst app = express();\r\n\r\napp.use((req, res, next) => {\r\n    req.requestTime = new Date().toISOString();\r\n    console.log(req.requestTime);\r\n    next();\r\n});\r\napp.use(\r\n    cors({\r\n        origin: \"*\",\r\n    })\r\n);\r\n\r\n//API ROUTES\r\napp.use(\"/api/v1/keycaps\", keycapRouter);\r\napp.use(\"/api/v1/keyswitches\", keyswitchRouter);\r\napp.use(\"/api/v1/fullbuilds\", fullbuildRouter);\r\n\r\nmodule.exports = app;\r\n","const express = require(\"express\");\r\n\r\n//Models\r\nconst Keycaps = require(\"../models/keycapModel\");\r\nconst APIFeatures = require(\"../utils/API_features\");\r\n\r\nlet router = express.Router();\r\n\r\nconst getAllKeycaps = async (req, res) => {\r\n    try {\r\n        //filtering\r\n        const features = new APIFeatures(Keycaps.find(), req.query)\r\n            .filter()\r\n            .sort();\r\n\r\n        const keycaps = await features.query;\r\n\r\n        res.status(200).json({\r\n            status: \"success\",\r\n            keycaps,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\n\r\nconst getKeycap = async (req, res) => {\r\n    try {\r\n        const id = req.params.id;\r\n        const keycap = await Keycaps.findOne({ _id: id });\r\n\r\n        res.status(200).json({\r\n            status: \"success\",\r\n            keycap,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\n\r\nrouter.route(\"/\").get(getAllKeycaps);\r\nrouter.route(\"/:id\").get(getKeycap);\r\n\r\nmodule.exports = router;\r\n","const mongoose = require(\"mongoose\");\r\n\r\nconst keycapsSchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n    },\r\n    material: {\r\n        type: String,\r\n    },\r\n    profile: {\r\n        type: String,\r\n    },\r\n    legend: {\r\n        type: String,\r\n    },\r\n    compatability: {\r\n        type: String,\r\n    },\r\n    design: {\r\n        type: String,\r\n    },\r\n    texture: {\r\n        type: String,\r\n    },\r\n});\r\n\r\nconst Tour = mongoose.model(\"Keycaps\", keycapsSchema);\r\n\r\nmodule.exports = Tour;\r\n","class APIFeatures {\r\n    constructor(query, queryString) {\r\n        this.query = query;\r\n        this.queryString = queryString;\r\n    }\r\n\r\n    filter() {\r\n        //filtering\r\n        const queryObj = { ...this.queryString };\r\n        const excludedFields = [\"sort\"];\r\n        excludedFields.forEach((el) => delete queryObj[el]);\r\n        this.query = this.query.find(queryObj);\r\n\r\n        return this;\r\n    }\r\n    sort() {\r\n        if (this.queryString.sort) {\r\n            console.log(this.queryString.sort);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = APIFeatures;\r\n","const express = require(\"express\");\r\n\r\n//models\r\nconst KeySwitches = require(\"../models/keyswitchesModel\");\r\nconst APIFeatures = require(\"../utils/API_features\");\r\n\r\nlet router = express.Router();\r\n\r\nconst getAllKeySwitches = async (req, res) => {\r\n    try {\r\n        //filtering\r\n        const features = new APIFeatures(KeySwitches.find(), req.query)\r\n            .filter()\r\n            .sort();\r\n\r\n        const keySwitches = await features.query;\r\n\r\n        res.status(200).json({\r\n            status: \"success\",\r\n            keySwitches,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\n\r\nconst getkeySwitch = async (req, res) => {\r\n    try {\r\n        const id = req.params.id;\r\n        const keySwitch = await KeySwitches.findOne({ _id: id });\r\n\r\n        res.status(200).json({\r\n            status: \"success\",\r\n            keySwitch,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\n\r\nrouter.route(\"/\").get(getAllKeySwitches);\r\nrouter.route(\"/:id\").get(getkeySwitch);\r\n\r\nmodule.exports = router;\r\n","const mongoose = require(\"mongoose\");\r\n\r\nconst keyswitchesSchema = mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n    },\r\n    actuationForce: {\r\n        type: Number,\r\n        alias: \"acutuationForce(g)\",\r\n    },\r\n    actuationPoint: {\r\n        type: Number,\r\n        alias: \"actuationPoint(mm)\",\r\n    },\r\n    travelDistance: {\r\n        type: Number,\r\n        alias: \"travelDistance(mm)\",\r\n    },\r\n    tactility: {\r\n        type: String,\r\n    },\r\n    sound: {\r\n        type: String,\r\n    },\r\n    durability: {\r\n        type: String,\r\n    },\r\n    switchType: {\r\n        type: String,\r\n    },\r\n});\r\n\r\nconst Tour = mongoose.model(\"Keyswitches\", keyswitchesSchema);\r\n\r\nmodule.exports = Tour;\r\n","const express = require(\"express\");\r\n\r\n//models\r\nconst FullKits = require(\"../models/fullBuildsModel\");\r\nconst APIFeatures = require(\"../utils/API_features\");\r\n\r\nlet router = express.Router();\r\n\r\nconst getAllBuildKits = async (req, res) => {\r\n    try {\r\n        //filtering\r\n        const features = new APIFeatures(FullKits.find(), req.query)\r\n            .filter()\r\n            .sort();\r\n\r\n        const fullkits = await features.query;\r\n\r\n        res.status(200).json({\r\n            status: \"success\",\r\n            fullkits,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\n\r\nconst getBuildKit = async (req, res) => {\r\n    try {\r\n        const id = req.params.id;\r\n        const fullKit = await FullKits.findOne({ _id: id });\r\n\r\n        res.status(200).json({\r\n            status: \"success\",\r\n            fullKit,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n};\r\n\r\nrouter.route(\"/\").get(getAllBuildKits);\r\nrouter.route(\"/:id\").get(getBuildKit);\r\n\r\nmodule.exports = router;\r\n","const mongoose = require(\"mongoose\");\r\n\r\nconst fullBuildSchema = mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n    },\r\n    keySwitches: [\r\n        {\r\n            name: String,\r\n            switchType: String,\r\n        },\r\n        {\r\n            name: String,\r\n            switchType: String,\r\n        },\r\n        {\r\n            name: String,\r\n            switchType: String,\r\n        },\r\n    ],\r\n    keyCaps: [\r\n        {\r\n            name: String,\r\n            material: String,\r\n        },\r\n    ],\r\n    case: String,\r\n    layout: String,\r\n    backlighting: Boolean,\r\n});\r\n\r\nconst Tour = mongoose.model(\"FullBuild\", fullBuildSchema);\r\n\r\nmodule.exports = Tour;\r\n"],"names":[],"version":3,"file":"main.js.map"}